var documenterSearchIndex = {"docs":
[{"location":"tutorial/tutorial3/#","page":"Scenario Lattices","title":"Scenario Lattices","text":"CurrentModule = ScenTrees","category":"page"},{"location":"tutorial/tutorial3/#Scenario-Lattices-1","page":"Scenario Lattices","title":"Scenario Lattices","text":"","category":"section"},{"location":"tutorial/tutorial3/#","page":"Scenario Lattices","title":"Scenario Lattices","text":"If the data process is Markovian, we approximate the process with a scenario lattice instead of a scenario tree. Scenario lattices are natural discretizations of the Markov processes.","category":"page"},{"location":"tutorial/tutorial3/#","page":"Scenario Lattices","title":"Scenario Lattices","text":"A scanrio lattice is similar to a scenario tree but has an added requirement that all nodes in stage t have the same children. This makes the description of a scanrio lattice less than for a scenario tree as a scenario lattice can only be described by its name, states of the nodes in the lattice and the probabilities of treansition in the lattice. ","category":"page"},{"location":"tutorial/tutorial3/#","page":"Scenario Lattices","title":"Scenario Lattices","text":"In a scenario lattice, the total number of nodes is equal to the total number of states which is equal to the sum of the elements in the branching vector.","category":"page"},{"location":"tutorial/tutorial3/#","page":"Scenario Lattices","title":"Scenario Lattices","text":"Consider the scenario lattice below with branching structure 1x2x3x4x5:","category":"page"},{"location":"tutorial/tutorial3/#","page":"Scenario Lattices","title":"Scenario Lattices","text":"(Image: Example of a scenario lattice)","category":"page"},{"location":"tutorial/tutorial3/#","page":"Scenario Lattices","title":"Scenario Lattices","text":"In the above scenario lattice, the total number of nodes are 1+2+3+4+5 = 15 nodes and the total number of edges in the lattice are (1x2)+(2x3)+(3x4)+(4x5) = 40 edges. A scenario tree with the same branching structure has 153 nodes and 153 links. This shows that, in a lattice, the number of variables do not grow exponentially as it does in a scenario tree. However, the number of possible paths in a scenario lattice is larger than in a scenario tree.","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"CurrentModule = ScenTrees","category":"page"},{"location":"tutorial/tutorial4/#Stochastic-Approximation-Process-1","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"","category":"section"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"This package was made for this purpose. Given a stochastic process, we want to approximate the process using either a scenario tree or a scanario lattice.","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"Every stochastic approximation iteraion modifies one path within the tree towards the new sequence. In this way the approximating quality of the tree is improved each time a new sample is observed. The tree is not stable in the beginiing but with more and more iterations, the scenario tree converges in probabilitiy. The resulting tree can be used for decision making process.","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"The stochastic approximation process is outlined as follows:","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"Decide on the branching structure of the tree/ lattice,\nStart with a tree/lattice (which is more of a qualified quess) with the stated branching structure,\nGenarate one sample from a particular known distribution with the same length and dimension as the states of the nodes of the tree/lattice.\nThe algorithm finds a sequence of nodes in the tree where the distance between the states of those nodes and the generated sample is minimal. The algorithm then updates the states of those nodes with the values in the generated sample. The states of other nodes remains unchanged.\nAt every iteration of the algorithm, the multistage distance is calculated.\nWhen done with the states of the nodes of the tree, the algorithm calculates the conditional probabilities to reach each node in the tree. At the end, the sum of the conditional probabilities to reach each node of the same parent must add up to 1.\nThe algorithm stops when all the number of iterations have been performed.","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"info: Info\nThe most important function in this approximation process is the function that user wants to approximate. This is the function that generates samples that improves the tree in each iteration. The function must take the number of stages and the dimension as inputs.","category":"page"},{"location":"tutorial/tutorial4/#Tree-Approximation-1","page":"Stochastic Approximation Process","title":"Tree Approximation","text":"","category":"section"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"In this package, we have the function TreeApproximation! which does the stochastic approximation process for scenario trees. This function takes the following inputs:","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"Tree (which takes the branching structure and dimension and inputs)","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"Name of the function that generates samples","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"Number of iterations","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"Value d for distance (2 is the default for we use the Euclidean distance, 1 would be for the normal distance)","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"Value r for the Wasserstein distance (2 is the default for Wasserstein distance)","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"Given the following inputs, the function does the stochastic approximation process and returns a valuated scenario tree.","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"info: Info\nThe user must provide the above inputs to the function. The user also dictates where the tree starts from in the script that generates samples from a stochastic process that the user wants to approximate.","category":"page"},{"location":"tutorial/tutorial4/#Example-1","page":"Stochastic Approximation Process","title":"Example","text":"","category":"section"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"Consider the following. We want to approximate the Gaussian random walk in 5 stages with a tree with a branching structure of 1x3x3x3x3 using the usual Euclidean distance and r=2 for the Wasserstein distance.","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"julia> using ScenTrees\njulia> ex2 = Tree([1,3,3,3,3],1)\njulia> sol1 = TreeApproximation!(ex2, GaussianSamplePath, 1000000, 2, 2)\njulia> treeplot(sol1)\njulia> savefig(\"treeapprox1.png\")","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"The function GaussianSamplePath takes the number of stages and the dimension as depicted by the tree that you want to generate. For example, in the above, GaussianSamplePath function will take 5 as the number of stages and 1 as the dimension and then generate  5 samples of a Gaussian distribution.","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"The output for the above approximation, shown below, is a scenario tree that is stable and represents the stochastic process in the best possible way.","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"(Image: Example of a valuated tree in 1D)","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"We can also appoximate a stochastic process in two dimension. Consider the Gaussian random walk in 2D. Our function GaussianSamplePath can generate samples from the Gaussian random walk in 2 dimension, for example as follows:","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"julia> GaussianSamplePath(4,2) # 4 stages, 2 dimension\n3x2 Array{Float64,2}\n1.0         0.0\n-0.4368     -0.4629\n2.3605      -0.2821","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"We can therefore do approximations in 2 dimension as follows:","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"julia> ex3 = Tree([1,3,3],2);\njulia> sol2 = TreeApproximation!(ex3,GaussianSamplePath,1000000,2,2);\njulia> plotD(sol2)\njulia> savefig(\"treeapprox2D.png\")","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"(Image: Example of a valuated tree in 2D)","category":"page"},{"location":"tutorial/tutorial4/#Lattice-Approximation-1","page":"Stochastic Approximation Process","title":"Lattice Approximation","text":"","category":"section"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"As mentioned before, some of the process that you may want to approximate are Markovian data processes. These processes can only be approximated by a scenario lattice. All the nodes in the same stage in a lattice have the same children nodes. ","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"To approximate a Markovian data process, we use the function LatticeApproximation. This function takes the following inputs:","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"Branching structure,\nName of the function that generates samples,\nNumber of iterations to be performed, and \nDimension of the states of the nodes in the lattice.","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"Lattice Approximation follows the same stochastic approximation process as for the scenario tree. The only difference is that, in each stage of a lattice, we find the closest lattice entry and use the sample generated to improve it. At the beginning, the lattice is not stable but with more and more iterations, the scenario lattice converges in probability and the resulting lattice can then be used for decision making process.","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"All the probabilities in each stage of the lattice must sum up to 1.","category":"page"},{"location":"tutorial/tutorial4/#Example-2","page":"Stochastic Approximation Process","title":"Example","text":"","category":"section"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"Consider the following example. We want to approximate a Gaussian random walk of 12 stages in 1 dimension with a scanario lattice with the branching structure of 1x3x4x5x6x7x8x9x10x11x12x13 and 1000000 iterations.","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"julia> sol4 = LatticeApproximation([1,3,4,5,6,7,8,9,10,11,12,13],GaussianSamplePath,1000000,1);","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"The result of the above approximation is a lattice which we can visualize it.","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"info: Info\nTo visualize a scenario lattice, we use the PlotLattice function.","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"julia> PlotLattice(sol4)\njulia> savefig(\"LatticeApprox.png\")","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"The above approximation gives the following output:","category":"page"},{"location":"tutorial/tutorial4/#","page":"Stochastic Approximation Process","title":"Stochastic Approximation Process","text":"(Image: Example of an approximated lattice)","category":"page"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"CurrentModule = ScenTrees","category":"page"},{"location":"tutorial/tutorial1/#Introduction-1","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"In multistage stochastic optimization, we are interested in approximations of  stochastic processes in by a finite structures. These processes are random and they have uncertain scenarios and a decision maker needs to make decisions at different stages. It is useful to depict the possible sequences of data for this processes in form of a scenario tree in the case of a discrete time stochastic process and a scenario lattice for Markovian data processes.","category":"page"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"A scenario tree/lattice is organized in levels which corresponds to stages 1ldotsT. Each node in a stage has a specified number of predecessors as defined by the branching structure.","category":"page"},{"location":"tutorial/tutorial1/#Goal-1","page":"Introduction","title":"Goal","text":"","category":"section"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"The goal  of ScenTrees.jl is to generate a valuated probability tree or a lattice which represents the stochastic process in the best way possible. ","category":"page"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"For example, consider a Gaussian random walk in 5 stages. The starting value of this process is known and fixed, say at 0 and the other values are random. The following plot shows 10,000 sample paths of this process:","category":"page"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"(Image: 10,000 sample paths from Gaussian random walk)","category":"page"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"Using those paths, we generate and improve a scenario tree or a scenario lattice. The number of iterations for the algorithm equals the number of sample paths that we want to generate from the stochastic process and the number of stages in the stochastic process equals the number of stages in the scenario tree or the scenario lattice. There are a lot of different branching structures that the user can choose for a tree that represents this stochastic process. The branching structure shows how many branches each node in the tree has at each stage of the tree. For example, we can use a branching structure of 1x2x2x2x2 for the scenario tree. This means that each node in the tree has two children. Basically, this is a binary tree. Using this branching structure, we obtain the following valuated probability tree that represents the above stochastic process:","category":"page"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"(Image: Scenario Tree 1x2x2x2x2)","category":"page"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"The above tree is optimal and therefore can be used by a decision maker for a decision making process depending on the type of problem he/she is handling.","category":"page"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"To measure the quality of the approximation, we use the concept of multistage distance between the stochastic process and the scanario tree or lattice.","category":"page"},{"location":"tutorial/tutorial1/#Multistage-distance-1","page":"Introduction","title":"Multistage distance","text":"","category":"section"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"To measure the distance of stochastic processes, it is not sufficient to only consider the distance between thier laws. It is also important to consider the information accumulated over time i.e., what the filtrations has to tell us over time. The Wasserstein distance do not correctly separate stochastic processes having different filtrations. It ignores filtrations and hence does not distinguish stochastic processes.","category":"page"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"Multistage distance was introduced by Prof. George Pflug (2009) . It turns out that this distance is very important to measure the distence between multistage stochastic processes as it incorporates filtrations introduced by the processes. We use this distance in our algorithm to measure the quality of approximation of the scenario tree. Generally, a scenario tree with a minimal distance to the stochastic process is consider to have a better quality approximation.","category":"page"},{"location":"tutorial/tutorial1/#Description-of-a-scenario-tree-1","page":"Introduction","title":"Description of a scenario tree","text":"","category":"section"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"A scenario tree is described by the following:","category":"page"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"Name of the tree\nParents of the nodes in the tree\nChildren of the parents in the tree \nStates of the nodes in the tree\nProbabilities of transition from one node to another.","category":"page"},{"location":"tutorial/tutorial1/#Description-of-a-scenario-lattice-1","page":"Introduction","title":"Description of a scenario lattice","text":"","category":"section"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"A scenario lattice differs from a scenario tree in that every node in stage t is a child for each node in stage t-1. So the nodes in stage t-1 share the same children.","category":"page"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"Due to the above, we only describe a scenario lattice by:","category":"page"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"Name of the lattice\nStates of the nodes of the lattice\nProbabilities of transition from one node to another in the lattice","category":"page"},{"location":"tutorial/tutorial1/#Usage-1","page":"Introduction","title":"Usage","text":"","category":"section"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"Since we have the basics of the scenario tree and the scenario lattice and since we created ScenTrees.jl  with an intention of being user-friendly, we will give an example of its usage and explain each part of it.  In the module of ScenTrees.jl, we have all the exported functions that are visible to the user i.e, that are public, and the user can call these functions depending on what he/she wants to achieve with this library","category":"page"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"module ScenTrees\n  include(\"TreeStructure.jl\")\n  include(\"TreeApprox.jl\")\n  include(\"StochPaths.jl\")\n  include(\"LatticeApprox.jl\")\n  export TreeApproximation!, LatticeApproximation, Tree, nodes, stage, height, leaves,\n        root,partTree, buildProb!, treeplot, plotD, PlotLattice,\n        GaussianSamplePath,RunningMaximum\n  ........\nend","category":"page"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"All of the above functions have been documented in their respective scripts and the user can find out what each function does by putting a ? before the function. For example, ?leaves will give an explanation of what the function leaves does. ","category":"page"},{"location":"tutorial/tutorial1/#","page":"Introduction","title":"Introduction","text":"In the tutorials to come, we will have a look in detail on the functionalities of the main functions of this library.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"CurrentModule = ScenTrees","category":"page"},{"location":"#ScenTrees.jl-1","page":"Home","title":"ScenTrees.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"info: Info\n","category":"page"},{"location":"#","page":"Home","title":"Home","text":"`ScenTrees.jl` is still under development.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"ScenTrees.jl is a package for generating and improving scenario trees and scenario lattices for multistage stochastic optimization problems using stochastic approximation. In this library, we approximate trajectories of a stochastic process using a scanario tree or a scenario lattice. The quality of approximation between the stochastic process and the scenario tree/ the scenario lattice is measure using a multistage distance. ","category":"page"},{"location":"#","page":"Home","title":"Home","text":"In these tutorials, we assume that the reader is quite familiar with the theory and explanation in the paper Dynamic Genaration of Scenario Trees by Prof. George Pflug and Prof. Alois Pichler","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The library ScenTrees.jl is on the registration process and can be installed in Julia as follows:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"]      # For the Pkg mode\nadd https://github.com/kirui93/ScenTrees.jl.git","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Once you have ScenTrees.jl installed, we recommend that you have a look on the tutorials from the beginning to the end to have a glimpe on how you can use the package to do scenario tree/lattice generation by the stochastic approximation process.","category":"page"},{"location":"#Citing-ScenTrees.jl-1","page":"Home","title":"Citing ScenTrees.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"info: Info\n","category":"page"},{"location":"#","page":"Home","title":"Home","text":"To be added.","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"CurrentModule = ScenTrees","category":"page"},{"location":"tutorial/tutorial2/#Functions-that-describe-a-scenario-tree-1","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"","category":"section"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"A basic scenario tree can be created using the Tree function in the package. This function takes the branching structure of the tree and the dimension that you are working on. For example, consider a tree with a branching structure of 1x2x2. This is a tree with a root in stage 0, and 2 nodes in stage 1 and each of the 2 nodes in stage one has 2 nodes in stage 2.","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"julia> example1 = Tree([1,2,2],1)\njulia> treeplot(example1)","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"The above tree basically is not optimal. This is an example of a beginning tree in stochastic approximation process. we start with a tree like this and then we use samples from a known distribution to improve the tree for a certain number of iterations.","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"(Image: Non optimal tree in 1D)","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"The above tree is in 1 dimension.  To generate a tree in 2 dimension, we use the following:","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"julia> example2 = Tree([1,2,2],2)\njulia> plotD(example2)","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"(Image: Non optimal tree in 2D)","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"And in general, we can generate a tree in any d dimension.","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"The above tree can described by the following functions: nodes, stages, height, leaves and the root of the tree.","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"Each tree has stages starting from 0 where the root node is.","category":"page"},{"location":"tutorial/tutorial2/#Nodes-of-the-tree-1","page":"Functions that describe a scenario tree","title":"Nodes of the tree","text":"","category":"section"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"This are the vertices that are in the scenario tree. Each node in the tree has a parent node except the root node where the tree starts from. As stated before, each scenario tree is characterized by its name, parents of the nodes , children of each parent nodes e.t.c. So therefore, we have nodes which has parents and those nodes are the children of the parent nodes.","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"For example,","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"julia> nodes(example1)\n\n#output \n1:7","category":"page"},{"location":"tutorial/tutorial2/#Stages-of-the-tree-1","page":"Functions that describe a scenario tree","title":"Stages of the tree","text":"","category":"section"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"Each node in a tree is in a specific stage and nodes in the same stage have the same number of children. The stages in a tree starts from 0 where the root node is and ends at stage T`where the leaf nodes are.","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"julia> stage(example1)\n0\n1\n1\n2\n2\n2\n2","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"The above example shows that we have 1 node in stage 0, 2 nodes in stage 1 and 4 nodes in stage 2.","category":"page"},{"location":"tutorial/tutorial2/#Root-of-the-tree-1","page":"Functions that describe a scenario tree","title":"Root of the tree","text":"","category":"section"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"The root of the tree is the node in which the tree starts from. The root of the tree has no parent; more or less, is the parent of all nodes.","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"julia> root(example1)\n1-element Array{Int64,1}\n1","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"The function root can also give us a sequence of nodes to reach a particular node of the tree. It turns out that this function will be very important in stochastic approximation as it will give us a path that we can improve with samples from a stochastic process.","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"If we want a sequece of nodes to reach, for example, node 6 in the above tree, we just call out the root`function as follows:","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"julia> root(example1,6)\n3-element Array{Int64,1}\n1\n3\n6","category":"page"},{"location":"tutorial/tutorial2/#Leaves-of-the-tree-1","page":"Functions that describe a scenario tree","title":"Leaves of the tree","text":"","category":"section"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"In each tree, we have the leaves. Leaves are all those in the tree which doesn't have children nodes. They are the terminal nodes in the tree. Our function leaves returns the leaf nodes in the tree, their indexes and the conditional probabilities to reach each of the leaves from the root node. Consider the following:","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"julia> leaves(example1)\n([4,5,6,7],1:4,[0.2508,0.1709,0.2566,0.2508])","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"From the above, it is clear that the sum of the conditional probabilities to reach all the leaves in the tree is 1.","category":"page"},{"location":"tutorial/tutorial2/#Plotting-the-tree-1","page":"Functions that describe a scenario tree","title":"Plotting the tree","text":"","category":"section"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"One of the most important things in programming is visualization. In this package, we can plot a scenario tree in 1D with the treeplot function and with the plotD function for a scenario tree in D dimension.","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"info: Info\n","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"You need to install the [PyPlot.jl](https://github.com/JuliaPy/PyPlot.jl) package for this plots.","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"For example, we can plot a default tree already in the package and then the figure can be saved with the function savefig.","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"julia> treeplot(Tree(402))\n\njulia> savefig(\"Tree402.pdf\")","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"(Image: Example of a tree in 1D)","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"We can plot a tree in 2 dimension as follows:","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"julia> treeplot(Tree(4022))\n\njulia> savefig(\"Tree4022.pdf\")","category":"page"},{"location":"tutorial/tutorial2/#","page":"Functions that describe a scenario tree","title":"Functions that describe a scenario tree","text":"(Image: Example of a tree in 2D)","category":"page"}]
}
